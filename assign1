#!/bin/bash

# Created by Itar Mehak. 
# Assignment 1 
# University of Windsor

count=0 
re=^[0-9]+$     #  Storing all combinations of number to check for valid filesize entered 
totalarg=$#     # Storing total no of arguments to run a selective loop on the extension list provided

if [[ $# -eq 0 ]]; then
        echo " Usage $0 [-s size] [-t dir1] [-d dir2] <ext list> where anything between [] is optional and <> is required "
        exit 1

fi

# This block checks for only size constraints and moves the files from current directory to myArchive of the current directory 

if [ "$3" != "-t" ] && [ "$3" != "-d" ] && [ "$5" != "-d" ] 
	then 
		if [[ "$1" = "-s" ]]; then
				if echo $2 | egrep -q '^[0-9]+$' ; then
				echo "No target directory mentioned  No destination directory mentioned"
				echo " Files with size > than mentioned will be moved to myArchive of current dir"
		if [ $3 ]; then

				for ext in ${@:3:$totalarg} ;do
 				for file in `ls *.$ext`; do
     
     			filesize=$(wc -c < $file)  
     			echo "$file : $filesize" 
     			if [[ $filesize -gt $2 ]]; then
       			test -d ./myArchive || mkdir ./myArchive &&  mv ./$file ./myArchive
      
        		count=$(( $count + 1 )) 
    	 		fi  
      
				done
				done
				echo "Moved $count files with size > $2"
if [ -d "myArchive" ]; then
tar -cf myArchive.tar myArchive
rm -r myArchive
echo "myArchive folder zipped" 
else
echo "Error creating myArchive. Please check if files with given extensions exit. "
fi
		else 
		echo "Sorry : No parameters Provided. Try Again"
		fi
				else
				echo "Not valid size"
	fi
	fi
fi

# This block checks for size constraints with target directory mentioned and destination directory not mentioned i.e. will 
#move the files above a certain size from the target directory to myArchive folder of the target directory

if [ "$3" = "-t" ] && [ "$5" != "-d" ]
	then
		if [[ "$1" = "-s" ]]; then
			if echo $2 | egrep -q '^[0-9]+$' ; then
			echo "target directory is mentioned ; No destination directory mentioned"
			echo " Files with size > than mentioned will be moved to myArchive of the mentioned directory"
					if [ $5 ]; then
					target=~/$4
						if [ -d "$target" ]; then
							for ext in ${@:5:$totalarg} ;do
 							for file in `ls $target/*.$ext`; do
     						filesize=$(wc -c < $file)
    						echo "$file    :   $filesize"
      								if  [[ $filesize -gt $2 ]]; then
									test -d $target/myArchive || mkdir $target/myArchive &&  mv $file $target/myArchive
    								count=$(( $count + 1 ))
     								fi     

							done
							done
							echo " $count files with size > $2 moved to $4"
#echo "zipping now  "
				if [ -d "$target/myArchive" ]; then

				tar -cf $target/myArchive.tar $target/myArchive
				rm -r $target/myArchive

				echo "myArchive folder zipped" 
				else
				echo "Error creating myArchive. Please check if files with given extensions exit. "
				fi
						else
						echo "Not a valid directory"
						fi
					else
						echo "Sorry : No parameters Provided. Try Again"
					fi
		else
		echo "Not valid size"
		fi
	fi
fi

# This block checks for size contraints with target directory and destination directory mentioned ; Will move the files from the 
# target directory to myArchive folder of the destination directory and will be compressed 

if [ "$3" = "-t" ] && [ "$5" = "-d" ] 
		then
					if [ "$1" = "-s" ]; then
							if echo $2 | egrep -q '^[0-9]+$' ; then
								echo "Target directory and Destination directory is mentioned"
								echo " Files with size > than mentioned will be moved from the mentioned target dir to myArchive of mentioned destination dir"
									if [ $7 ]; then
										target=~/$4
										destination=~/$6
									if [ -d "$target" ] && [ -d "$destination" ]; then
											for ext in ${@:7:$totalarg} ;do
 											for file in `ls $target/*.$ext`; do
     											filesize=$(wc -c < $file)
     											echo "$file :    $filesize"

      											if  [[ $filesize -gt $2 ]]; then
      											test -d $destination/myArchive || mkdir $destination/myArchive &&  mv $file $destination/myArchive
      											count=$(( $count + 1 ))
      											fi

											done
											done
													echo "$count files moved from $4 to $6"
			if [ -d "$destination/myArchive" ]; then
				tar -cf $destination/myArchive.tar $destination/myArchive
				rm -r $destination/myArchive
				echo "myArchive folder zipped" 
			else
				echo "Error creating myArchive. Please check if files with given extensions exit. "
			fi
									else
									echo "One of the mentioned directories does not exist"
									fi
								else
								echo "Sorry : No parameters Provided. Try Again"
								fi
						 else
						echo "Not valid size"
						 fi
						fi 
fi
	

if [ "$1" = "-t" ] && [ "$3" = "-d" ]; then 				# When no file size is mentioned 

			target=~/$2
			destination=~/$4
			echo " File size filtered is not mentioned"
					if [ $5 ]; then
						if [ -d "$target" ] && [ -d "$destination" ]; then


							for ext in ${@:5:$totalarg} ;do
 							for file in `ls $target/*.$ext`; do
   									echo "$file"
  							test -d $destination/myArchive || mkdir $destination/myArchive &&  mv $file $destination/myArchive
       							count=$(( $count + 1 ))

							done
							done
							echo "$count files moved from $2 to $4"
								if [ -d "$destination/myArchive" ]; then
									tar -cf $destination/myArchive.tar $destination/myArchive
									rm -r $destination/myArchive
									echo "myArchive folder zipped" 
								else
									echo "Error creating myArchive. Please check if files with given extensions exit. "
								fi
						else
						echo "One of the mentioned directories does not exist"
						fi
					else
					echo " Sorry. No parameters provided. Try Again"
					fi
fi




# This block checks for size constraints and the mentioned destination dir  ; Files will be moved from current directory to the destination 
# directory

if [ "$3" = "-d" ] && [ "$5" != "-t" ]; then
		if [ "$1" = "-s" ]; then
			if echo $2 | egrep -q '^[0-9]+$' ; then
				echo "No target directory is mentioned ; destination directory mentioned"
				echo " Files with size > than mentioned will be moved to myArchive folder of $4 from current dir\n"
 
					if [ $5 ]; then
						destination=~/$4
							if [ -d "$destination" ]; then
								for ext in ${@:5:$totalarg} ;do
 										for file in `ls *.$ext`; do
     									filesize=$(wc -c < $file)
     									echo "$file   :  $filesize "
    
      										if  [[ $filesize -gt $2 ]]; then
     
    												test -d $destination/myArchive || mkdir $destination/myArchive && mv ./$file $destination/myArchive
     
         											count=$(( $count + 1))
       										fi
										done
								done
								echo "$count files moved from current directory to $4"
				if [ -d "$destination/myArchive" ]; then
				tar -cf $destination/myArchive.tar $destination/myArchive
				rm -r $destination/myArchive
				echo "myArchive folder zipped" 
				else
				echo "Error creating myArchive. Please check if files with given extensions exit. "
				fi
						else
						echo "The destination directory is not valid"
						fi
					else
					echo "Sorry : No parameters provided. Try Again"
					fi
			else
			echo " Not valid file size"
			fi 
		fi

fi


# This block checks when all the optional parameters are omitted and only extension list is provided.
if [ "$1" != "-s" ] && [ "$1" != "-t" ] && [ "$1" != "-d" ]; then

#echo "Last block"
			for ext in $* ;do
 				for file in `ls *.$ext`; do
     					if [ -f "$file" ]; then
       						test -d ./myArchive || mkdir ./myArchive &&  mv ./$file ./myArchive
       							count=$(( $count + 1 ))
      					fi 
				done
			done 
				echo "$count files moved from current directory to the same directory"
					if [ -d "myArchive" ]; then
					tar -cf myArchive.tar myArchive
					rm -r myArchive

					echo "myArchive folder zipped" 
					else
					echo "Error creating myArchive. Please check if files with given extensions exit. "
					fi
fi

# This block checks when only destination dir is mentioned and rest all optional parameters are omitted. 

if [ "$1" = "-d" ] && [ "$3" != "-t" ]; then
			destination=~/$2
					if [ $3 ]; then
							if [ -d "$destination" ]; then
										for ext in ${@:3:$totalarg} ;do
 													for file in `ls *.$ext`; do
     												echo "$file   :  $filesize "
   														 test -d $destination/myArchive || mkdir $destination/myArchive && mv ./$file $destination/myArchive
    
         											count=$(( $count + 1))
       
													done
										done

										echo "$count files moved from current directory to $2"
								if [ -d "$destination/myArchive" ]; then
									tar -cf $destination/myArchive.tar $destination/myArchive
									rm -r $destination/myArchive
									echo "myArchive folder zipped" 
								else
									echo "Error creating myArchive. Please check if files with given extensions exit. "
								fi
							else
							echo "The destination directory is not valid"
							fi
					else
						echo "Sorry : No paramaters provided. Try Again"
					fi
fi

# This block checks when only target dir is mentioned and rest all optional parameters are omitted. 


if [ "$1" = "-t" ] && [ "$3" != "-d" ]; then
				if [ $3 ]; then
					target=~/$2
							if [ -d "$target" ]; then
									for ext in ${@:3:$totalarg} ;do
 											for file in `ls $target/*.$ext`; do
   												echo "$file    :   $filesize"
    											test -d $target/myArchive || mkdir $target/myArchive && mv  $file $target/myArchive
      											 echo "Moved from $2 to its myArchive of $2 directory"
        											count=$(( $count + 1 ))

											done
									done
										echo "$count files moved to $4 directory"
												if [ -d "$target/myArchive" ]; then
													tar -cf $target/myArchive.tar $target/myArchive
													rm -r $target/myArchive
													echo "myArchive folder zipped" 
												else
													echo "Error creating myArchive. Please check if files with given extensions exit. "
												fi
							else
							echo "Not a valid directory"
							fi
				else
				echo "Sorry : No paramaters provided. Try Again"
			fi
fi









